{"version":3,"sources":["components/BooksTable/BooksTable.js","containers/ViewBooks/ViewBooks.js","App.js","serviceWorker.js","index.js","containers/ViewBooks/ViewBooks.module.css"],"names":["booksTable","props","books","map","book","react_default","a","createElement","key","id","book_title","book_author","book_pages","book_publication_city","book_publication_country","book_publication_year","Table_default","striped","bordered","hover","responsive","ViewBooks","state","history","createBrowserHistory","basename","window","location","pathname","numberOfBooks","itemsPerPage","pages","page","search","getListOfBooks","requestedPage","filters","length","type","values","isNaN","axios","post","then","response","data","count","numberOfPages","Math","ceil","_this","setState","push","handleChangePage","pageNumber","handleChangeItemsPerPage","handleSearch","document","querySelector","value","queryParams","queryString","parse","parseInt","items","this","p","_this2","moreThan10Pages","currentPage","_loop","number","Pagination_default","Item","active","onClick","Ellipsis","Last","First","_loop2","_loop3","_loop4","searchInfo","className","classes","ResultsInfo","Controls","DropdownButton_default","title","Dropdown_default","Form_default","Control","maxLength","Button_default","variant","BooksTable","Component","App","containers_ViewBooks_ViewBooks","Boolean","hostname","match","defaults","baseURL","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.4764350f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nconst booksTable = props => {\r\n  const books = props.books.map(book => (\r\n    <tr key={book.id}>\r\n      <td>{book.id}</td>\r\n      <td>{book.book_title}</td>\r\n      <td>{book.book_author}</td>\r\n      <td>{book.book_pages}</td>\r\n      <td>{book.book_publication_city}</td>\r\n      <td>{book.book_publication_country}</td>\r\n      <td>{book.book_publication_year}</td>\r\n    </tr>\r\n  ));\r\n\r\n  return (\r\n    <Table striped bordered hover responsive=\"md\">\r\n      <thead>\r\n        <tr>\r\n          <th>ID</th>\r\n          <th>Title</th>\r\n          <th>Author</th>\r\n          <th>Pages</th>\r\n          <th>Publication City</th>\r\n          <th>Publication Country</th>\r\n          <th>Publication Year</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>{books}</tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nbooksTable.propTypes = {\r\n  books: PropTypes.array.isRequired,\r\n  pages: PropTypes.number.isRequired,\r\n  page: PropTypes.number.isRequired\r\n};\r\n\r\nexport default booksTable;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { createBrowserHistory } from 'history';\r\nimport queryString from 'query-string';\r\n\r\nimport classes from './ViewBooks.module.css';\r\nimport axios from \"axios\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Pagination from \"react-bootstrap/Pagination\";\r\nimport BooksTable from \"../../components/BooksTable/BooksTable\";\r\n\r\nclass ViewBooks extends Component {\r\n  state = {\r\n    history: createBrowserHistory({\r\n      basename: window.location.pathname, // The base URL of the app (see below)\r\n    }),\r\n    books: [],\r\n    numberOfBooks: 0,\r\n    itemsPerPage: 0,\r\n    pages: 0,\r\n    page: 1,\r\n    search: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Get the current location.\r\n    const location = this.state.history.location;\r\n    // Get results according to URL parameters.\r\n    if (location.search) {\r\n      // Parse query params.\r\n      const queryParams = queryString.parse(location.search)\r\n      const page = parseInt(queryParams.p);\r\n      const itemsPerPage = parseInt(queryParams.items)\r\n      const search = queryParams.search ? queryParams.search : '';\r\n      this.getListOfBooks(page, itemsPerPage, search);\r\n    } else {\r\n      // Get first page of all books, 20 items per page, with no search filter.\r\n      this.getListOfBooks(1, 20, []);\r\n    }\r\n  }\r\n\r\n  getListOfBooks = (requestedPage, itemsPerPage, search) => {\r\n    let filters = [];\r\n    // Check if search was used, then set the variable to be used within the POST request.\r\n    if (search.length) {\r\n      filters = [{type: \"all\", values: [search]}];\r\n    }\r\n\r\n    // Validation checks on the query params.\r\n    if (itemsPerPage > 50 || isNaN(itemsPerPage)) {\r\n      itemsPerPage = 50;\r\n    } else if (itemsPerPage < 1) {\r\n      itemsPerPage = 1;\r\n    }\r\n\r\n    if (requestedPage < 1 || isNaN(requestedPage)) {\r\n      requestedPage = 1;\r\n    }\r\n\r\n    axios\r\n      .post(\"/api/books\", {\r\n        page: requestedPage,\r\n        itemsPerPage: itemsPerPage,\r\n        filters: filters\r\n      })\r\n      .then(response => {\r\n        const numberOfBooks = response.data.count;\r\n        const numberOfPages = Math.ceil(\r\n          numberOfBooks / itemsPerPage\r\n        );\r\n        this.setState({\r\n          books: response.data.books,\r\n          numberOfBooks: numberOfBooks,\r\n          pages: numberOfPages,\r\n          page: requestedPage,\r\n          itemsPerPage: itemsPerPage,\r\n          search: search\r\n        });\r\n\r\n        // Check if search was used, then update URL with params.\r\n        if (search.length) {\r\n          this.state.history.push('/?search=' + search + '&p=' + requestedPage + '&items=' + itemsPerPage);\r\n        } else {\r\n          this.state.history.push('/?p=' + requestedPage + '&items=' + itemsPerPage);\r\n        }\r\n      });\r\n  };\r\n\r\n  handleChangePage = pageNumber => {\r\n    this.getListOfBooks(pageNumber, this.state.itemsPerPage, this.state.search);\r\n  };\r\n\r\n  handleChangeItemsPerPage = itemsPerPage => {\r\n    // Note: Resets back to 1st page, avoids issue where no results are shown because page no longer exists.\r\n    this.getListOfBooks(1, itemsPerPage, this.state.search);\r\n  }\r\n\r\n  handleSearch = () => {\r\n    const search = document.querySelector('#search').value;\r\n\r\n    const location = this.state.history.location;\r\n\r\n    // Get results using URL parameters + Search field.\r\n    const queryParams = queryString.parse(location.search)\r\n    const itemsPerPage = parseInt(queryParams.items)\r\n    this.getListOfBooks(1, itemsPerPage, search);\r\n  }\r\n\r\n  render() {\r\n    // Create individual page button components.\r\n    let items = [];\r\n    const numberOfPages = this.state.pages;\r\n    const moreThan10Pages =  numberOfPages > 10;\r\n    const currentPage = this.state.page;\r\n\r\n    if (moreThan10Pages &&  currentPage < 10) {\r\n      // For the first 10 pages, just show the normal set of buttons.\r\n      // Should be able to see a button to skip to the last page.\r\n      for (let number = 1; number <= 10; number++) {\r\n        items.push(\r\n          <Pagination.Item\r\n            key={number}\r\n            active={number === currentPage}\r\n            onClick={() => this.handleChangePage(number)}\r\n          >\r\n            {number}\r\n          </Pagination.Item>\r\n        );\r\n      }\r\n      items.push(<Pagination.Ellipsis key='...'/>);\r\n      items.push(<Pagination.Last key='last-page' onClick={() => this.handleChangePage(numberOfPages)} />);\r\n    } else if (moreThan10Pages && currentPage >= 10 && currentPage < numberOfPages - 5) {\r\n      // After the first 10 pages, and before the last 5 pages, I should see the first and last buttons.\r\n      items.push(<Pagination.First key='first-page' onClick={() => this.handleChangePage(1)} />);\r\n      items.push(<Pagination.Ellipsis key='...-01'/>);\r\n      // The active page button should also be in the middle (spaced by 5).\r\n      for (let number = currentPage - 5; number <= currentPage + 5; number++) {\r\n        items.push(\r\n          <Pagination.Item\r\n            key={number}\r\n            active={number === currentPage}\r\n            onClick={() => this.handleChangePage(number)}\r\n          >\r\n            {number}\r\n          </Pagination.Item>\r\n        );\r\n      }\r\n      items.push(<Pagination.Ellipsis key='...-02'/>);\r\n      items.push(<Pagination.Last key='last-page' onClick={() => this.handleChangePage(numberOfPages)}/>);\r\n    } else if (moreThan10Pages && currentPage >= 10 && currentPage >= numberOfPages - 5) {\r\n      // Once at the last 6 pages, you should be able to see the last page and a button to gp back to the first page.\r\n      items.push(<Pagination.First key='first-page' onClick={() => this.handleChangePage(1)} />);\r\n      items.push(<Pagination.Ellipsis key='...'/>);\r\n      for (let number = numberOfPages - 6; number <= numberOfPages; number++) {\r\n        items.push(\r\n          <Pagination.Item\r\n            key={number}\r\n            active={number === currentPage}\r\n            onClick={() => this.handleChangePage(number)}\r\n          >\r\n            {number}\r\n          </Pagination.Item>\r\n        );\r\n      }\r\n    } else {\r\n      // Case where there are less than 10 pages, should see up to 10 standard page buttons.\r\n      for (let number = 1; number <= numberOfPages; number++) {\r\n        items.push(\r\n          <Pagination.Item\r\n            key={number}\r\n            active={number === currentPage}\r\n            onClick={() => this.handleChangePage(number)}\r\n          >\r\n            {number}\r\n          </Pagination.Item>\r\n        );\r\n      }\r\n    }\r\n\r\n    let searchInfo = null;\r\n    if (this.state.search.length) {\r\n      searchInfo = <p className={classes.ResultsInfo}>\r\n        Search results for <b>{this.state.search}, { this.state.numberOfBooks } results found.</b></p>;\r\n    }\r\n\r\n    return (\r\n      <section className={classes.ViewBooks}>\r\n        <section className={classes.Controls}>\r\n          <DropdownButton id=\"dropdown-basic-button\" title={\"Items per page: \" + this.state.itemsPerPage}>\r\n            <Dropdown.Item onClick={() => this.handleChangeItemsPerPage(5)}>5</Dropdown.Item>\r\n            <Dropdown.Item onClick={() => this.handleChangeItemsPerPage(10)}>10</Dropdown.Item>\r\n            <Dropdown.Item onClick={() => this.handleChangeItemsPerPage(20)}>20</Dropdown.Item>\r\n            <Dropdown.Item onClick={() => this.handleChangeItemsPerPage(50)}>50</Dropdown.Item>\r\n          </DropdownButton>\r\n          <Form.Control type='text' id='search' maxLength='200'/>\r\n          <Button onClick={this.handleSearch} variant=\"primary\">Search</Button>\r\n        </section>\r\n        { searchInfo }\r\n        <BooksTable\r\n          books={this.state.books}\r\n          pages={this.state.pages}\r\n          page={this.state.page}\r\n        />\r\n        <Pagination>{items}</Pagination>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ViewBooks;\r\n","import React, { Component } from \"react\";\r\n\r\nimport ViewBooks from './containers/ViewBooks/ViewBooks';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return <ViewBooks />;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport axios from 'axios';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// All axios API requests will have this prefixed automatically.\r\naxios.defaults.baseURL = 'https://cors-anywhere.herokuapp.com/http://nyx.vima.ekt.gr:3000/';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ViewBooks\":\"ViewBooks_ViewBooks__2QHbk\",\"Controls\":\"ViewBooks_Controls__3-rSC\",\"ResultsInfo\":\"ViewBooks_ResultsInfo__3qkKB\"};"],"sourceRoot":""}